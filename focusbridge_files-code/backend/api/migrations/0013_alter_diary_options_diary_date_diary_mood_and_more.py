# Generated by Django 5.2.1 on 2025-08-13 15:20

from django.db import migrations, models
from django.utils import timezone


def backfill_and_dedupe(apps, schema_editor):
    """把舊資料的 date 以 created_at.date() 回填；若同 user 同一天多筆，保留最早，其他往後順延到沒被占用的日期"""
    from django.db.models import Count
    from datetime import timedelta

    Diary = apps.get_model('api', 'Diary')

    # 1) 回填 date（以 created_at 的當地日期）
    for d in Diary.objects.all().only('id', 'created_at', 'date', 'user_id'):
        want = (d.created_at or timezone.now()).date()
        if d.date != want:
            d.date = want
            d.save(update_fields=['date'])

    # 2) 去重（同 user 同一天 >1 筆）
    dups = (Diary.objects.values('user_id', 'date')
            .annotate(c=Count('id')).filter(c__gt=1))

    for g in dups:
        qs = (Diary.objects
              .filter(user_id=g['user_id'], date=g['date'])
              .order_by('created_at', 'id'))
        keep = qs.first()
        for extra in qs[1:]:
            new_date = extra.date
            # 往後找下一個沒被占用的日期
            while Diary.objects.filter(user_id=extra.user_id, date=new_date)\
                               .exclude(pk=extra.pk).exists():
                new_date = new_date + timedelta(days=1)
            if new_date != extra.date:
                extra.date = new_date
                extra.save(update_fields=['date'])


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0012_todo'),
    ]

    operations = [
        # 排序改為以 date, created_at
        migrations.AlterModelOptions(
            name='diary',
            options={'ordering': ['-date', '-created_at']},
        ),

        # ---- 先加欄位（date 允許空，避免一次性違反唯一約束）----
        migrations.AddField(
            model_name='diary',
            name='date',
            field=models.DateField(null=True, blank=True),
        ),
        migrations.AddField(
            model_name='diary',
            name='mood',
            field=models.CharField(
                max_length=12,
                choices=[('sunny', 'Sunny'), ('cloudy', 'Cloudy'), ('rain', 'Rain'), ('storm', 'Storm'), ('windy', 'Windy')],
                blank=True,
            ),
        ),
        migrations.AddField(
            model_name='diary',
            name='mood_color',
            field=models.CharField(max_length=7, blank=True),
        ),
        migrations.AddField(
            model_name='diary',
            name='title',
            field=models.CharField(max_length=100, blank=True),
        ),
        migrations.AddField(
            model_name='diary',
            name='weather_icon',
            field=models.CharField(max_length=20, blank=True),
        ),

        # ---- 回填 & 去重（確保之後能設唯一約束）----
        migrations.RunPython(backfill_and_dedupe, migrations.RunPython.noop),

        # ---- 把 date 改為必填（不再允許空值）----
        migrations.AlterField(
            model_name='diary',
            name='date',
            field=models.DateField(),
        ),

        # 索引
        migrations.AddIndex(
            model_name='diary',
            index=models.Index(fields=['user', 'date'], name='api_diary_user_id_9a18c9_idx'),
        ),

        # 最後才加唯一約束（此時已無衝突）
        migrations.AddConstraint(
            model_name='diary',
            constraint=models.UniqueConstraint(fields=('user', 'date'), name='uniq_user_date'),
        ),
    ]
